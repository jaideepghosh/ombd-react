{"version":3,"sources":["components/card.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","maxWidth","media","height","paddingTop","avatar","backgroundColor","red","remove_fav","grey","RecipeReviewCard","props","classes","addToFavBtn","CardHeader","Avatar","aria-label","className","onClick","addToFavourite","imdbID","Title","title","Year","year","Poster","poster","Type","type","length","slice","subheader","removeFromFavBtn","Card","CardMedia","image","isFavourite","OMDB_API_KEY","process","OMDB_KEY","margin","padding","display","alignItems","appbar_root","flexGrow","input","marginLeft","spacing","flex","iconButton","divider","CustomizedInputBase","React","useState","filter","setFilter","search","setSearch","movies","setMovies","favourites","setFavourites","toggleFavourite","data","newFavourites","Object","assign","toast","error","position","POSITION","TOP_RIGHT","autoClose","hideProgressBar","closeOnClick","pauseOnHover","success","AppBar","Toolbar","Typography","variant","values","Paper","component","InputBase","placeholder","inputProps","onChange","e","target","value","calue","IconButton","color","Select","labelId","id","event","MenuItem","Divider","orientation","preventDefault","payload","apikey","s","axios","get","params","then","response","Search","alert","catch","console","log","searchMovies","Grid","item","xs","container","justify","map","movie","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.de433967.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { red, grey } from \"@material-ui/core/colors\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 345\n  },\n  media: {\n    height: 0,\n    paddingTop: \"56.25%\" // 16:9\n  },\n  avatar: {\n    backgroundColor: red[500]\n  },\n  remove_fav: {\n    backgroundColor: grey[500]\n  }\n}));\n\nexport default function RecipeReviewCard(props) {\n  const classes = useStyles();\n\n  const addToFavBtn = (\n    <CardHeader\n      avatar={\n        <Avatar\n          aria-label=\"Add to favorites\"\n          className={classes.avatar}\n          onClick={() => {\n            props.addToFavourite(props.imdbID, {\n              imdbID: props.imdbID,\n              Title: props.title,\n              Year: props.year,\n              Poster: props.poster,\n              Type: props.type\n            });\n          }}\n        >\n          <FavoriteIcon />\n        </Avatar>\n      }\n      title={\n        props.title\n          ? props.title.length > 14\n            ? props.title.slice(0, 12) + \"...\"\n            : props.title\n          : \"Dummy title\"\n      }\n      subheader={\"Released in \" + props.year}\n    />\n  );\n  const removeFromFavBtn = (\n    <CardHeader\n      avatar={\n        <Avatar\n          aria-label=\"Remove from favorites\"\n          className={classes.remove_fav}\n          onClick={() => {\n            props.addToFavourite(props.imdbID);\n          }}\n        >\n          <FavoriteIcon />\n        </Avatar>\n      }\n      title={\n        props.title\n          ? props.title.length > 14\n            ? props.title.slice(0, 12) + \"...\"\n            : props.title\n          : \"Dummy title\"\n      }\n      subheader={\"Released in \" + props.year}\n    />\n  );\n\n  return (\n    <Card className={classes.root}>\n      <CardMedia\n        className={classes.media}\n        image={\n          props.poster && props.poster !== \"N/A\"\n            ? props.poster\n            : \"https://dummyimage.com/300x425/000000/fff\"\n        }\n        title={props.title ? props.title.slice(0, 25) : \"Dummy title\"}\n      />\n      {props.isFavourite(props.imdbID) ? removeFromFavBtn : addToFavBtn}\n    </Card>\n  );\n}\n","import React from \"react\";\nimport axios from \"axios\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Grid from \"@material-ui/core/Grid\";\nimport RecipeReviewCard from \"./components/card\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst OMDB_API_KEY = process.env.OMDB_KEY ? process.env.OMDB_KEY : \"a3136a8c\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: \"20px\",\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\"\n    // width: 400\n  },\n  appbar_root: {\n    flexGrow: 1\n  },\n  title: {\n    flexGrow: 1\n  },\n\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1\n  },\n  iconButton: {\n    padding: 10\n  },\n  divider: {\n    height: 28,\n    margin: 4\n  }\n}));\n\nexport default function CustomizedInputBase() {\n  const classes = useStyles();\n\n  const [filter, setFilter] = React.useState(\"All\");\n  const [search, setSearch] = React.useState(\"\");\n  const [movies, setMovies] = React.useState([]);\n  const [favourites, setFavourites] = React.useState({});\n\n  const changeFilter = (event) => {\n    setFilter(event.target.value);\n  };\n  const changeSearch = (event) => {\n    setSearch(event.target.value);\n  };\n  const toggleFavourite = (imdbID, data = {}) => {\n    if (imdbID in favourites) {\n      const newFavourites = Object.assign({}, favourites);\n      delete newFavourites[imdbID];\n      setFavourites(newFavourites);\n      toast.error(\"Removed from favourites.\", {\n        position: toast.POSITION.TOP_RIGHT,\n        autoClose: 5000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true\n      });\n    } else {\n      const newFavourites = Object.assign({}, favourites);\n      newFavourites[imdbID] = data;\n      setFavourites(newFavourites);\n      toast.success(\"Added to favourites.\", {\n        position: toast.POSITION.TOP_RIGHT,\n        autoClose: 5000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true\n      });\n    }\n  };\n  /**\n   * Check if the given imdbId is already added in favourites.\n   */\n  const isFavourite = (imdbID) => {\n    if (imdbID in favourites) return true;\n    else return false;\n  };\n\n  const searchMovies = (event) => {\n    event.preventDefault();\n    const payload = { apikey: OMDB_API_KEY };\n    if (search) Object.assign(payload, { s: search });\n    if (filter && filter !== \"All\") Object.assign(payload, { type: filter });\n    axios\n      .get(\"http://www.omdbapi.com/\", {\n        params: payload\n      })\n      .then((response) => {\n        if (response?.data?.Search) {\n          setMovies(response.data.Search);\n        } else {\n          alert(\"Something went wrong.\");\n        }\n      })\n      .catch((error) => {\n        console.log(\"Something went wrong. Error\", error);\n        alert(\"Something went wrong.\");\n      });\n  };\n\n  return (\n    <div>\n      <ToastContainer />\n      <div className={classes.appbar_root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography\n              variant=\"h6\"\n              className={classes.title}\n              onClick={() => {\n                setMovies([]);\n              }}\n            >\n              Home\n            </Typography>\n            <Typography\n              variant=\"h6\"\n              onClick={() => {\n                setMovies(Object.values(favourites));\n              }}\n            >\n              Favourites\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </div>\n\n      <Paper component=\"form\" className={classes.root}>\n        <InputBase\n          className={classes.input}\n          placeholder=\"Search Movie\"\n          inputProps={{ \"aria-label\": \"search movies\" }}\n          onChange={(e) => {\n            changeSearch(e);\n          }}\n          calue={search}\n        />\n\n        <IconButton\n          color=\"primary\"\n          className={classes.iconButton}\n          aria-label=\"directions\"\n        >\n          <Select\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={filter}\n            onChange={changeFilter}\n          >\n            <MenuItem value=\"All\">All</MenuItem>\n            <MenuItem value=\"movie\">Movies</MenuItem>\n            <MenuItem value=\"series\">Series</MenuItem>\n            <MenuItem value=\"episode\">Episodes</MenuItem>\n          </Select>\n        </IconButton>\n        <Divider className={classes.divider} orientation=\"vertical\" />\n        <IconButton\n          type=\"submit\"\n          className={classes.iconButton}\n          aria-label=\"search\"\n          onClick={(e) => searchMovies(e)}\n        >\n          <SearchIcon />\n        </IconButton>\n      </Paper>\n\n      <Grid className={classes.root}>\n        <Grid item xs={12}>\n          <Grid container justify=\"center\" spacing={2}>\n            {movies.map((movie) => (\n              <Grid key={movie.imdbID} item>\n                <RecipeReviewCard\n                  title={movie.Title}\n                  year={movie.Year}\n                  poster={movie.Poster}\n                  type={movie.Type}\n                  imdbID={movie.imdbID}\n                  addToFavourite={toggleFavourite}\n                  isFavourite={isFavourite}\n                />\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}